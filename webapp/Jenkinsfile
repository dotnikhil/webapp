pipeline {
    agent any
    environment {
        SONAR_SCANNER = '/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonarqube/bin/sonar-scanner' 
        SONAR_IP = 'http://107.20.29.195:9000/'
        IMAGE = 'nikhildocker4424/webapp:1'
    }
    stages {
        stage('git checkout') {
            steps {
                git 'https://github.com/dotnikhil/webapp.git'
                echo 'Cloned the git repo'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                echo 'SonarQube Analysis'
                script {
                    withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv('sonarqube') {
                            sh """${SONAR_SCANNER} \
                                -D sonar.projectVersion=v3 \
                                -D sonar.token=${SONAR_TOKEN} \
                                -D sonar.projectKey=webapp \
                                -D sonar.host.url=${SONAR_IP}"""
                        }
                    }
                }
            }
        }
        stage('docker login') {
            steps {
                withCredentials([string(credentialsId: 'dockerhubpass', variable: 'dockerhubpass')]) {
                    sh "docker login -u nikhildocker4424 -p $dockerhubpass"
                }
                echo 'Logged into DockerHub'
            }
        }
        stage('building image') {
            steps {
                echo 'Building image'
                sh "docker build -t $IMAGE ./webapp"
            }
        }
        stage('Trivy image scanning') {
            agent {
                label 'trivy-agent'
            }
            steps {
                echo 'Scanning Image with Trivy'
                script {
                def result = sh(script: """
                    docker run --rm aquasec/trivy:latest \
                    image -f json \
                    $IMAGE > trivy_scan_results.json
                """, returnStatus: true)

                sh 'cat trivy_scan_results.json'

                if (result != 0) {
                    error "Vulnerabilities found in Docker Image"
                }
                }
            }
        }
        stage('pushing image') {
            steps {
                echo 'Pushing image to DockerHub'
                sh "docker push $IMAGE"
            }
        }
        stage('k8s EKS Cluster') {
            environment {
                KUBECONFIG = '/home/config'
            }
            steps {
                echo 'Deploying pods to EKS'
                sh 'kubectl apply -f webapp/mypod.yml'
                sh 'kubectl get pods -o wide'
            }
        }
    }
}